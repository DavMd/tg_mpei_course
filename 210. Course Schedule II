//https://leetcode.com/problems/course-schedule-ii/
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites)
    {
        vector<int> res;
	    vector<int> Sch(numCourses, 0);
	    vector<bool> visit(numCourses, false);
	    vector<vector<int>> edge(numCourses, vector<int>());
	    queue<int> q;
	
	    for (int i = 0; i < prerequisites.size(); i++)
		    edge[prerequisites[i][1]].push_back(prerequisites[i][0]),
            Sch[prerequisites[i][0]]++;
	
	    for (int i = 0; i < Sch.size(); i++)
		    if (!Sch[i])
			    visit[i] = true, q.push(i);
	
	    while (!q.empty())
        {
		    int course = q.front(); 
            q.pop();
		    res.push_back(course);
		    
		    for (int i = 0; i < edge[course].size(); i++)
            {
			    int nextCourse = edge[course][i];
			    if (!visit[nextCourse])
				    if (!--Sch[nextCourse])
					    visit[nextCourse] = true, q.push(move(nextCourse));
		    }
	    }
	
	    if (res.size() != numCourses)
		    res.clear();
		
	    return res;
    }
        
};
